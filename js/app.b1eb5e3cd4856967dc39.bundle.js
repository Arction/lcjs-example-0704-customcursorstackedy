(self.webpackChunk=self.webpackChunk||[]).push([[143],{138:(e,t,s)=>{const o=s(475),{lightningChart:a,emptyFill:l,AxisTickStrategies:i,AutoCursorModes:r,UILayoutBuilders:n,UIElementBuilders:u,UIOrigins:c,synchronizeAxisIntervals:d,Themes:m}=o,{createProgressiveTraceGenerator:h}=s(27),g=["Ch 1","Ch 2","Ch 3"],x=g.length,S=a().Dashboard({numberOfRows:x,numberOfColumns:1}),f=g.map(((e,t)=>{const s=S.createChartXY({columnIndex:0,rowIndex:t,columnSpan:1,rowSpan:1});return s.setAutoCursorMode(r.disabled),0===t?s.setTitle("Stacked Y Dashboard with Custom Cursor"):s.setTitleFillStyle(l),t!==x-1&&s.getDefaultAxisX().setTickStrategy(i.Empty),s.getDefaultAxisY().setThickness(50),s})),y=(f[f.length-1].getDefaultAxisX(),f.map(((e,t)=>e.addLineSeries({dataPattern:{pattern:"ProgressiveX"}}))));d(...f.map((e=>e.getDefaultAxisX())));const T=S.addUIElement(n.Column,S.engine.scale).setMouseInteractions(!1).setOrigin(c.LeftBottom).setMargin(5).setBackground((e=>e.setFillStyle(S.getTheme().cursorResultTableFillStyle).setStrokeStyle(S.getTheme().cursorResultTableStrokeStyle))),b=u.TextBox.addStyler((e=>e.setTextFillStyle(S.getTheme().cursorResultTableTextFillStyle))),k=T.addElement(n.Row).addElement(b),A=y.map(((e,t)=>T.addElement(n.Row).addElement(b))),E=f[x-1].getDefaultAxisX().addCustomTick(u.PointableTextBox).setAllocatesAxisSpace(!1).setGridStrokeStyle(S.getTheme().cursorGridStrokeStyleX),p=[];f.forEach(((e,t)=>{t!==x-1&&p.push(e.getDefaultAxisX().addConstantLine().setValue(0).setMouseInteractions(!1).setStrokeStyle(S.getTheme().cursorGridStrokeStyleX))}));const C=y.map(((e,t)=>f[t].getDefaultAxisY().addCustomTick(u.PointableTextBox).setAllocatesAxisSpace(!1))),V=e=>{e?(T.setVisible(!0),E.setVisible(!0),C.forEach((e=>e.setVisible(!0))),p.forEach((e=>e.setVisible(!0)))):(T.setVisible(!1),E.setVisible(!1),C.forEach((e=>e.setVisible(!1))),p.forEach((e=>e.setVisible(!1))))};V(!1);const D=e=>{const t=y.map((t=>t.solveNearestFromScreen(e)));t.includes(void 0)?V(!1):(T.setPosition({x:e.x,y:e.y}),k.setText(`X: ${f[0].getDefaultAxisX().formatValue(t[0].location.x)}`),A.forEach(((e,s)=>{e.setText(`Y${s}: ${f[s].getDefaultAxisY().formatValue(t[s].location.y)}`)})),E.setValue(t[0].location.x),p.forEach(((e,t)=>{e.setValue(E.getValue())})),C.forEach(((e,s)=>{e.setValue(t[s].location.y)})),V(!0))},X=(e,t)=>{const s={x:t.clientX,y:t.clientY},o=S.engine.clientLocation2Engine(s.x,s.y);D(o)};f.forEach(((e,t)=>{e.onSeriesBackgroundMouseMove(X),y[t].onMouseMove(X),e.onSeriesBackgroundMouseLeave(((e,t)=>{V(!1)})),e.onSeriesBackgroundMouseDragStart(((e,t)=>{V(!1)}))})),Promise.all(y.map((e=>h().setNumberOfPoints(1e5).generate().toPromise().then((t=>{e.add(t)}))))).then((()=>{f.forEach((e=>e.forEachAxis((e=>e.fit(!1))))),requestAnimationFrame((()=>{D({x:500,y:500})}))}))}},e=>{e.O(0,[736],(()=>(138,e(e.s=138)))),e.O()}]);