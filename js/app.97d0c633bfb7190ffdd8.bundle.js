(self.webpackChunk=self.webpackChunk||[]).push([[143],{138:(e,t,s)=>{const o=s(475),{lightningChart:a,emptyFill:l,AxisTickStrategies:r,AutoCursorModes:i,UILayoutBuilders:n,UIElementBuilders:u,UIOrigins:c,synchronizeAxisIntervals:d,Themes:m}=o,{createProgressiveTraceGenerator:h}=s(27),g=["Ch 1","Ch 2","Ch 3"],S=g.length,f=a().Dashboard({numberOfRows:S,numberOfColumns:1}),x=g.map(((e,t)=>{const s=f.createChartXY({columnIndex:0,rowIndex:t,columnSpan:1,rowSpan:1});return s.setAutoCursorMode(i.disabled),0===t?s.setTitle("Stacked Y Dashboard with Custom Cursor"):s.setTitleFillStyle(l),t!==S-1&&s.getDefaultAxisX().setTickStrategy(r.Empty),s.getDefaultAxisY().setThickness(50),s})),T=(x[x.length-1].getDefaultAxisX(),x.map(((e,t)=>e.addLineSeries({dataPattern:{pattern:"ProgressiveX"}}))));d(...x.map((e=>e.getDefaultAxisX())));const b=f.addUIElement(n.Column,f.coordsRelative).setMouseInteractions(!1).setOrigin(c.LeftBottom).setMargin(5).setBackground((e=>e.setFillStyle(f.getTheme().cursorResultTableFillStyle).setStrokeStyle(f.getTheme().cursorResultTableStrokeStyle))),k=u.TextBox.addStyler((e=>e.setTextFillStyle(f.getTheme().cursorResultTableTextFillStyle))),y=b.addElement(n.Row).addElement(k),A=T.map(((e,t)=>b.addElement(n.Row).addElement(k))),p=x[S-1].getDefaultAxisX().addCustomTick(u.PointableTextBox).setAllocatesAxisSpace(!1).setGridStrokeStyle(f.getTheme().cursorGridStrokeStyleX),E=[];x.forEach(((e,t)=>{t!==S-1&&E.push(e.getDefaultAxisX().addConstantLine().setValue(0).setMouseInteractions(!1).setStrokeStyle(f.getTheme().cursorGridStrokeStyleX))}));const C=T.map(((e,t)=>x[t].getDefaultAxisY().addCustomTick(u.PointableTextBox).setAllocatesAxisSpace(!1))),V=e=>{e?(b.setVisible(!0),p.setVisible(!0),C.forEach((e=>e.setVisible(!0))),E.forEach((e=>e.setVisible(!0)))):(b.setVisible(!1),p.setVisible(!1),C.forEach((e=>e.setVisible(!1))),E.forEach((e=>e.setVisible(!1))))};V(!1);const D=e=>{const t=T.map((t=>t.solveNearestFromScreen(e)));t.includes(void 0)?V(!1):(b.setPosition(f.translateCoordinate(e,f.coordsRelative)),y.setText(`X: ${x[0].getDefaultAxisX().formatValue(t[0].location.x)}`),A.forEach(((e,s)=>{e.setText(`Y${s}: ${x[s].getDefaultAxisY().formatValue(t[s].location.y)}`)})),p.setValue(t[0].location.x),E.forEach(((e,t)=>{e.setValue(p.getValue())})),C.forEach(((e,s)=>{e.setValue(t[s].location.y)})),V(!0))},M=(e,t)=>{D(t)};x.forEach(((e,t)=>{e.onSeriesBackgroundMouseMove(M),T[t].onMouseMove(M),T[t].onMouseLeave((()=>{V(!1)})),e.onSeriesBackgroundMouseLeave(((e,t)=>{V(!1)})),e.onSeriesBackgroundMouseDragStart(((e,t)=>{V(!1)}))})),Promise.all(T.map((e=>h().setNumberOfPoints(1e5).generate().toPromise().then((t=>{e.add(t)}))))).then((()=>{x.forEach((e=>e.forEachAxis((e=>e.fit(!1))))),requestAnimationFrame((()=>{D({clientX:500,clientY:500})}))}))}},e=>{e.O(0,[736],(()=>(138,e(e.s=138)))),e.O()}]);